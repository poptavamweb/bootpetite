// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin make-grid-columns {
	%bootpetite-column {
		position: relative;

		// Prevent columns from collapsing when empty
		min-height: 1px;

		// Inner gutter via padding
		padding-left:  ceil(($grid-gutter-width / 2));
		padding-right: floor(($grid-gutter-width / 2));
	}

	@each $breakpoint in map-keys($grid-breakpoints) {
		@for $i from 1 through $grid-columns {
			$selector: col-#{$breakpoint}-#{$i};

			@if index($grid, $selector) {
				.#{$selector} {
					@extend %bootpetite-column;
				}
			}
		}
	}
}


// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($breakpoint) {

	$list: ();

	@for $i from 1 through $grid-columns {
		$selector: col-#{$breakpoint}-#{$i};

		@if index($grid, $selector) {
			$list: append($list, ".#{$selector}", comma);
		}
	}

	@if 0 < length($list) {
		#{$list} {
			float: left;
		}
	}
}


@mixin calc-grid-column($index, $class, $type) {
	@if ($type == width) and ($index > 0) and index($grid, col-#{$class}-#{$index}) {
		.col-#{$class}-#{$index} {
			width: percentage(($index / $grid-columns));
		}
	}
	@if ($type == push) and ($index > 0)  and index($grid, col-#{$class}-push-#{$index}) {
		.col-#{$class}-push-#{$index} {
			left: percentage(($index / $grid-columns));
		}
	}
	@if ($type == push) and ($index == 0)  and index($grid, col-#{$class}-push-#{$index}) {
		.col-#{$class}-push-0 {
			left: auto;
		}
	}
	@if ($type == pull) and ($index > 0)  and index($grid, col-#{$class}-pull-#{$index}) {
		.col-#{$class}-pull-#{$index} {
			right: percentage(($index / $grid-columns));
		}
	}
	@if ($type == pull) and ($index == 0)  and index($grid, col-#{$class}-pull-#{$index}) {
		.col-#{$class}-pull-0 {
			right: auto;
		}
	}
	@if ($type == offset) and index($grid, col-#{$class}-offset-#{$index}) {
		.col-#{$class}-offset-#{$index} {
			margin-left: percentage(($index / $grid-columns));
		}
	}
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
	@for $i from 0 through $columns {
		@include calc-grid-column($i, $class, $type);
	}
}


// Create grid for specific class
@mixin make-grid($class) {
	@include float-grid-columns($class);
	@include loop-grid-columns($grid-columns, $class, width);
	@include loop-grid-columns($grid-columns, $class, pull);
	@include loop-grid-columns($grid-columns, $class, push);
	@include loop-grid-columns($grid-columns, $class, offset);
}
